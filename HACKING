Things are obviously in a tremendous state of flux.  There are
numerous pieces of code that are undergoing large amounts of changes,
and I periodically commit upwards of 20 files at a time with super
helpful commit messages like "sync".  Even with this current state of
affairs, I'd like people looking at the code, and if they feel moved
to contribute, so much the better.

Please contact me if you're interested in working in a specific area
so we can try to avoid stepping on each others' toes.

There are a couple of large, well contained tasks that could be done
largely independently of everything else.  I'll get to them
eventually, but they're all free for the taking.  I've ordered them in
terms of size/difficulty/coolness, from hardest to easiest (and
therefore coolest to least cool):

	1. Scrap/rewrite/fix/whatever the SMK (Smacker) decoder.
	   There are format docs up at:

	   http://wiki.multimedia.cx/index.php?title=Smacker

	   Clearly I don't understand the docs (and video codecs and
	   huffman trees in general) and couldn't get it to work.
	   This is of course assuming the spec itself is valid.  I
	   don't know that it is.

	   This task would result in all of the animated portraits,
	   the cut scenes, the animations in the main menu and race
	   selection screen (pretty much anything that's animated
	   that's not a unit/flingy) being visible.  It's not strictly
	   necessary for the game, but it's definitely got eyecandy
	   value.  Plus, to my knowledge noone has written an open
	   source SMK decoder before.  Be the first :)

	2. Convert StormLib to managed code.

	   I want scsharp to be completely managed, but don't want to
	   roll my own MPQ library.  It's a sizeable amount of work,
	   and StormLib works for our purposes.  That said, it's
	   unmanaged code, requires Makefile futzing for different
	   platforms, etc, etc.  Maintaining p/invoke dependencies on
	   external libraries from within libstorm is fine (zlib,
	   bzlib come to mind), but nothing that comes in an scsharp
	   release should be unmanaged code.

	3. Figure out font rendering so that we can operate with either SC
	   or BW assets.  the best solution would enable us to render
	   fonts from the data contained in the
	   Stardat.mpq/Broodat.mpq archives, but I'd settle for a
	   solution that works with either CD's install.exe.

	   And while you're at it, figure out why the rendered text
	   look so bad.. alpha issues, I'm sure.  spacing issues as well.

	4. The parallax (SPK) renderer used for the starfield
	   background on platform levels renders a 2x2 white rectangle
	   for each star.  apparently the .spk file contains bitmap
	   data for the stars.  Figure out the format and render the
	   stars correctly.

Email me if you're interested in any of the above tasks, and I'll get
some more info to you regarding where in the code changes will be
likely, and answer any other questions you might have.

welcome,
toshok