<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SdlDotNet.Particles</name>
    </assembly>
    <members>
        <member name="T:SdlDotNet.Particles.Emitters.ParticleCircleEmitter">
            <summary>
            A particle emitter that emits circle-based particles.
            </summary>
            <example><code>
            ParticleCircleEmitter emitter = new ParticleCircleEmitter();
            emitter.ColorMin = Color.Black;
            emitter.ColorMax = Color.White;
            emitter.RadiusMin = 1;
            emitter.RadiusMax = 3;
            particleSystem.Add(emitter);
            </code></example>
        </member>
        <member name="T:SdlDotNet.Particles.Emitters.ParticlePixelEmitter">
            <summary>
            A particle emitter that emits pixel particles.
            </summary>
            <example>
            <code>
            ParticlePixelEmitter emitter = new ParticlePixelEmitter(Color.Black, Color.White);
            particleSystem.Add(emitter);
            </code>
            </example>
        </member>
        <member name="T:SdlDotNet.Particles.Emitters.ParticleEmitter">
            <summary>
            The base abstract particle emitter class. This is to be derived from when creating new particle emitters.
            </summary>
            <example>
            The following example creates a particle emitter that emits blue pixels. The example is pretty much useless as there is already a ParticlePixelEmitter class available.
            <code>
            public class BluePixelEmitter : ParticleEmitter
            {
            	protected override SdlDotNet.Particles.Particle.BaseParticle CreateParticle()
            	{
            		ParticlePixel p = new ParticlePixel();
            		p.Color = Color.Blue;
            		return p;
            	}
            }
            </code>
            </example>
            <remarks>You can use the Random property to get random numbers or the GetRange function to retrieve ranged random numbers. The base particle attributes are handled by the particle system.  All you have to change are the derived properties.</remarks>
        </member>
        <member name="T:SdlDotNet.Particles.Particle.BaseParticle">
            <summary>
            An abstract class describing a base particle.
            </summary>
            <remarks>Some implementations of the particle class include ParticlePixel and ParticleSprite.</remarks>
            <example>This is an example of implementing a new kind of particle.  It creates a ParticleBox that uses blue boxes to represent particles:
            <code>
            public class ParticleBox : BaseParticle
            {
            	public override void Render(Surface destination)
            	{
            		destination.DrawBox(new Rectangle((int)this.X, (int)this.Y, 100,100), Color.Blue);
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.BaseParticle.Render(SdlDotNet.Surface)">
            <summary>
            Draws the particle onto the destination.
            </summary>
            <param name="destination">The destination surface of the particle.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.BaseParticle.Update">
            <summary>
            Updates the location and life of the particle.
            </summary>
            <returns>True if the particle is still alive, false if the particle is to be destroyed.</returns>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.BaseParticle.Life">
            <summary>
            The current life of the particle. -1 means infinate life.
            </summary>
            <remarks>This is decreased when the Update method is called.</remarks>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.BaseParticle.LifeFull">
            <summary>
            Gets and sets the value representing the full life of the particle.
            </summary>
            <remarks>This is usually used when distinguishing when the particle should start dying out with alpha transparency.</remarks>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.BaseParticle.Static">
            <summary>
            Gets and sets whether the particle's velocity will change its location.
            </summary>
            <remarks>If set to true, the particle will not move.  If set to false, the particle will move with manipulators.</remarks>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.BaseParticle.X">
            <summary>
            The X coordinate of the particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.BaseParticle.Y">
            <summary>
            The Y coordinate of the particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.BaseParticle.Velocity">
            <summary>
            The speed and direction the particle is going.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.BaseParticle.Width">
            <summary>
            Gets and sets the width of the particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.BaseParticle.Height">
            <summary>
            Gets and sets the height of the particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.BaseParticle.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge of the particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.BaseParticle.Right">
            <summary>
            Gets the x-coordinate of the right edge of the particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.BaseParticle.Left">
            <summary>
            Gets the x-coordinate of the left edge of the particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.BaseParticle.Top">
            <summary>
            Gets the y-coordinate of the top edge of the particle.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleEmitter.GetRange(System.Single,System.Single)">
            <summary>
            A helper method to get a random float between the given range.
            </summary>
            <param name="min">The lower bound.</param>
            <param name="max">The upper bound.</param>
            <returns>A float between the two numbers.</returns>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleEmitter.#ctor">
            <summary>
            Creates a new particle emitter.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleEmitter.#ctor(SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Creates a new pixel particle emitter inside a particle system.
            </summary>
            <param name="system">The system to add to.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleEmitter.Update">
            <summary>
            Updates the particle emitter.
            </summary>
            <returns>True if it's still alive, false if not.</returns>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleEmitter.SetParticleBaseAttributes(SdlDotNet.Particles.Particle.BaseParticle)">
            <summary>
            A private method that will change the attributes of the passed in particle to fit the emitter's description.
            </summary>
            <param name="particle">The particle to change.</param>
            <returns>The particle with the changed properties.</returns>
            <remarks>Use this method when overriding the CreateParticle method.</remarks>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleEmitter.CreateParticle">
            <summary>
            Abstract method that will create a particle based on the emitter's attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleEmitter.Render(SdlDotNet.Surface)">
            <summary>
            Renders the emitter onto the surface.
            </summary>
            <param name="destination">The destination surface.</param>
            <remarks>In most cases, this does nothing as nothing is represented by the emitter.</remarks>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.Random">
            <summary>
            The random number generator associated with the particle emitters.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.Emitting">
            <summary>
            Get and set whether the particle emitter is to be emitting particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.Height">
            <summary>
            Gets and sets the height of the particle emitter.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.Width">
            <summary>
            Gets and sets the width of the particle emitter.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.LifeFullMin">
            <summary>
            Gets and sets the minimum life a particle can have.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.LifeFullMax">
            <summary>
            Gets and sets the maximum life a particle can have.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.LifeMin">
            <summary>
            Gets and sets the minimum life a particle can have.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.LifeMax">
            <summary>
            Gets and sets the maximum life a particle can have.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.DirectionMin">
            <summary>
            Gets and sets the minimum direction range of particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.DirectionMax">
            <summary>
            Gets and sets the maximum direction range of particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.SpeedMin">
            <summary>
            Gets and sets the minimum speed a particle can have.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.SpeedMax">
            <summary>
            Gets and sets the maximum speed a particle can have.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.Frequency">
            <summary>
            Gets and sets the frequency of particle emission.  Measured in particle per 1000 updates.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.Target">
            <summary>
            Gets and sets where the particle collection where this emitter is to send its particles.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.#ctor">
            <summary>
            Creates a new pixel particle emitter.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.#ctor(SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Creates a new pixel particle emitter inside a particle system.
            </summary>
            <param name="system">The system that the particle emitter should be added to.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.#ctor(SdlDotNet.Particles.ParticleSystem,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a particle emitter that emits particels inside the given system with min and max color values.
            </summary>
            <param name="system">The system that the particle emitter should be added to.</param>
            <param name="minColor">The minimum color values of emitted particles.</param>
            <param name="maxColor">The maximum color values of emitted particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a particle emitter with min and max color values.
            </summary>
            <param name="minColor">The minimum color values of emitted particles.</param>
            <param name="maxColor">The maximum color values of emitted particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.CreateParticle">
            <summary>
            A protected method to return a new particle pixel with the randomized color attributes.
            </summary>
            <returns>A new particle pixel with the new color values.</returns>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.ColorMin">
            <summary>
            Gets and sets the minimum color values.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.ColorMax">
            <summary>
            Gets and sets the maximum color values.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.MinR">
            <summary>
            Gets and sets the minimum R value for emitted particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.MaxR">
            <summary>
            Gets and sets the maximum R value for emitted particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.MinG">
            <summary>
            Gets and sets the minimum G value for emitted particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.MaxG">
            <summary>
            Gets and sets the maximum G value for emitted particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.MinB">
            <summary>
            Gets and sets the minimum B value for emitted particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.MaxB">
            <summary>
            Gets and sets the maximum B value for emitted particles.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleCircleEmitter.#ctor">
            <summary>
            Creates a new pixel particle emitter.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleCircleEmitter.#ctor(SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Creates a new pixel particle emitter inside a particle system.
            </summary>
            <param name="system">The system that the particle emitter should be added to.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleCircleEmitter.#ctor(SdlDotNet.Particles.ParticleSystem,System.Drawing.Color,System.Drawing.Color,System.Int16,System.Int16)">
            <summary>
            Creates a particle emitter that emits particels inside the given system with min and max color values.
            </summary>
            <param name="system">The system that the particle emitter should be added to.</param>
            <param name="minColor">The minimum color values of emitted particles.</param>
            <param name="maxColor">The maximum color values of emitted particles.</param>
            <param name="radiusMin">The minimum radius of a particle.</param>
            <param name="radiusMax">The maximum radius of a particle.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleCircleEmitter.#ctor(System.Drawing.Color,System.Drawing.Color,System.Int16,System.Int16)">
            <summary>
            Creates a particle emitter with min and max color values.
            </summary>
            <param name="minColor">The minimum color values of emitted particles.</param>
            <param name="maxColor">The maximum color values of emitted particles.</param>
            <param name="radiusMin">The minimum radius of a particle.</param>
            <param name="radiusMax">The maximum radius of a particle.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleCircleEmitter.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a particle emitter with min and max color values.
            </summary>
            <param name="minColor">The minimum color values of emitted particles.</param>
            <param name="maxColor">The maximum color values of emitted particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleCircleEmitter.#ctor(System.Int16,System.Int16)">
            <summary>
            Creates a particle emitter with radius values.
            </summary>
            <param name="radiusMin">The minimum radius of a particle.</param>
            <param name="radiusMax">The maximum radius of a particle.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleCircleEmitter.CreateParticle">
            <summary>
            A protected method to return a new particle pixel with the randomized color attributes.
            </summary>
            <returns>A new particle pixel with the new color values.</returns>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleCircleEmitter.RadiusMax">
            <summary>
            Gets and sets the maximum radius of particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleCircleEmitter.RadiusMin">
            <summary>
            Gets and sets the minimum radius for particles.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter">
            <summary>
            A particle emitter that emits particle rectangles.
            </summary>
            <example>
            <code>
            ParticleRectangleEmitter emitter = new ParticlePixelEmitter(new Size(10,10), new Size(50,50));
            particleSystem.Add(emitter);
            </code>
            </example>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.#ctor">
            <summary>
            Creates a new rectangle particle.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.#ctor(SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Creates a new rectangle particle within a system.
            </summary>
            <param name="system">The parent system of the emitter.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.#ctor(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Creates a new rectangle particle with a max size and min size.
            </summary>
            <param name="minSize">The minimum size of rectangle particles.</param>
            <param name="maxSize">The maximum size of rectangle particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.#ctor(SdlDotNet.Particles.ParticleSystem,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Creates a new rectangle particle within a system with a max and min size.
            </summary>
            <param name="system">The parent system of the emitter.</param>
            <param name="minSize">The minimum size of rectangle particles.</param>
            <param name="maxSize">The maximum size of rectangle particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.CreateParticle">
            <summary>
            Creates a new ParticleRectangle with the set attributes.
            </summary>
            <returns>The new particle rectangle represented by a BaseParticle.</returns>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.MinHeight">
            <summary>
            Gets and sets the minimum height of particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.MaxHeight">
            <summary>
            Gets and sets the maximum height of particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.MaxWidth">
            <summary>
            Gets and sets the maximum width of particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.MinWidth">
            <summary>
            Gets and sets the minimum width of particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.MinSize">
            <summary>
            Gets and sets the minimum size of particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.MaxSize">
            <summary>
            Gets and sets the maximum size of particles.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Emitters.ParticleSpriteEmitter">
            <summary>
            A particle emitter that shoots out random sprites from a sprite collection.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSpriteEmitter.#ctor(SdlDotNet.Particles.ParticleSystem,SdlDotNet.Sprites.Sprite)">
            <summary>
            Creates a new particle emitter that emits sprite objects.
            </summary>
            <param name="system">The particle system to add this particle emitter.</param>
            <param name="sprite">The sprite to emit.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSpriteEmitter.#ctor(SdlDotNet.Particles.ParticleSystem,SdlDotNet.Sprites.SpriteCollection)">
            <summary>
            Creates a new particle emitter that emits sprite objects.
            </summary>
            <param name="system">The particle system to add this particle emitter.</param>
            <param name="sprites">The sprite collection to choose sprites from when emitting.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSpriteEmitter.#ctor(SdlDotNet.Sprites.Sprite)">
            <summary>
            Creates a new particle emitter that emits sprite objects.
            </summary>
            <param name="sprite">The sprite to emit.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSpriteEmitter.#ctor(SdlDotNet.Sprites.SpriteCollection)">
            <summary>
            Creates a new particle emitter that emits sprite objects.
            </summary>
            <param name="sprites">The sprite collection to choose sprites from when emitting.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSpriteEmitter.CreateParticle">
            <summary>
            Creates a particle based on the sprite parameters.
            </summary>
            <returns>The created particle.</returns>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleSpriteEmitter.Sprites">
            <summary>
            Gets and sets the collection of sprites assosiated with this particle emitter.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Emitters.ParticleSurfaceEmitter">
            <summary>
            A particle emitter that emits surfaces from a surface collection to represent particles..
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSurfaceEmitter.#ctor(SdlDotNet.Particles.ParticleSystem,SdlDotNet.Surface)">
            <summary>
            Creates a new particle emitter that emits surface objects.
            </summary>
            <param name="system">The particle system to add this particle emitter.</param>
            <param name="surface">The surface to emit.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSurfaceEmitter.#ctor(SdlDotNet.Particles.ParticleSystem,SdlDotNet.SurfaceCollection)">
            <summary>
            Creates a new particle emitter that emits surface objects.
            </summary>
            <param name="system">The particle system to add this particle emitter.</param>
            <param name="surfaces">The surface collection to choose surfaces from when emitting.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSurfaceEmitter.#ctor(SdlDotNet.Surface)">
            <summary>
            Creates a new particle emitter that emits surface objects.
            </summary>
            <param name="surface">The surface to emit.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSurfaceEmitter.#ctor(SdlDotNet.SurfaceCollection)">
            <summary>
            Creates a new particle emitter that emits surface objects.
            </summary>
            <param name="surfaces">The surface collection to choose surfaces from when emitting.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSurfaceEmitter.CreateParticle">
            <summary>
            Creates a particle from a surface in the surface collection.
            </summary>
            <returns>The created particle.</returns>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleSurfaceEmitter.Surfaces">
            <summary>
            Gets and sets the collection of surfaces assosiated with this particle emitter.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Manipulators.IParticleManipulator">
            <summary>
            An interface describing a force that manipulates a group of particles.
            </summary>
            <example>
            The following makes a particle manipulator that keeps pixels from going off the left side of the screen.
            <code>
            public class ParticleBounceLeft : IParticleManipulator
            {
            	public ParticleBounceLeft()
            	{
            	}
            	public void Manipulate(ParticleCollection particles)
            		foreach(BaseParticle p in particles)
            		{
            			if(p.X &lt; 0)
            			{
            				p.X = this.X;
            				p.Velocity.X *= -1;
            			}
            		}
            	}
            }
            </code>
            </example>
            <remarks>The Manipulate method should only change the velocity of the particles.</remarks>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.IParticleManipulator.Manipulate(SdlDotNet.Particles.Particle.ParticleCollection)">
            <summary>
            Manipulates the given group of particles by the manipulators force.
            </summary>
            <param name="particles">The collection of particles to manipulate.</param>
            <remarks>This should only affect the particles' velocity.</remarks>
        </member>
        <member name="T:SdlDotNet.Particles.Manipulators.ParticleBoundary">
            <summary>
            A particle manipulator the keeps particles within a boundary.
            </summary>
            <example>
            The following example will keep all particles in the particleSystem in a rectangle of 0,0,100,100.
            <code>
            ParticleBoundry bounds = new ParticleBoundry(0,0,100,100);
            particleSystem.Add(bounds);
            </code></example>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleBoundary.#ctor">
            <summary>
            Create a ParticleBoundary with an empty boundary.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleBoundary.#ctor(System.Drawing.SizeF)">
            <summary>
            Create a ParticleBoundary from a given size.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleBoundary.#ctor(System.Drawing.Size)">
            <summary>
            Create a ParticleBoundary from a given size.
            </summary>
            <param name="size">The width and height of the boundary.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleBoundary.#ctor(System.Drawing.Rectangle)">
            <summary>
            Create a ParticleBoundary in the given rectangle boundary.
            </summary>
            <param name="rect">The rectangle representing the boundary.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleBoundary.#ctor(System.Drawing.RectangleF)">
            <summary>
            Create a ParticleBoundary from a given rectangle boundary.
            </summary>
            <param name="rect">The rectangle representing the boundary.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleBoundary.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a ParticleBoundary from a given bounds.
            </summary>
            <param name="positionX">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="positionY">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the boundary.</param>
            <param name="height">The height of the boundary.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleBoundary.#ctor(System.Single,System.Single)">
            <summary>
            Create a ParticleBoundary from a given size.
            </summary>
            <param name="width">The width of the boundary.</param>
            <param name="height">The height of the boundary.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleBoundary.Manipulate(SdlDotNet.Particles.Particle.ParticleCollection)">
            <summary>
            Makes sure that every particle is within the given boundary.
            </summary>
            <param name="particles">The particle collection to set inside the bounds.</param>
            <remarks>Particles that reach the outside the rectangle are bounced back into bounds.</remarks>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Boundary">
            <summary>
            Gets and sets the boundary rectangle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.X">
            <summary>
            Gets and set the x-coordinate 
            of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Y">
            <summary>
            Gets and sets the y-coordinate of 
            the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Left">
            <summary>
            Gets the x-coordinate of the left edge of the boundry.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Right">
            <summary>
            Gets the x-coordinate of the right edge of the boundry.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Top">
            <summary>
            Gets the y-coordinate of the top edge of the boundry.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge of the boundry.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Width">
            <summary>
            Gets and sets the width of the boundry.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Height">
            <summary>
            Gets and sets the height of the boundry.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Size">
            <summary>
            Gets and sets the size of the boundry (width and height).
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Location">
            <summary>
            Gets and sets the location of the boundry.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Manipulators.ParticleFriction">
            <summary>
            A particle manipulator that slows down particles by a given amount of speed.
            </summary>
            <example>
            The following example creates a particle friction manipulator that slows particles down by 0.5f every update.
            <code>
            ParticleFriction friction = new ParticleFriction(0.5f);
            particleSystem.Add(friction);
            </code>
            </example>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleFriction.#ctor">
            <summary>
            Create a ParticleFriction object with the default amount of friction.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleFriction.#ctor(System.Single)">
            <summary>
            Create a ParticleFriction object.
            </summary>
            <param name="friction">The amount of friction to apply to the particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleFriction.Manipulate(SdlDotNet.Particles.Particle.ParticleCollection)">
            <summary>
            Applies the friction to the given set of particles.
            </summary>
            <param name="particles">The particles to apply the friction to.</param>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleFriction.Friction">
            <summary>
            Gets and sets the amount of friction applied to the particles.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Manipulators.ParticleGravity">
            <summary>
            A particle manipulator that pulls all particles by a common gravity.
            </summary>
            <example>
            The following example puts a vertical gravity of 0.4f in the particleSystem.
            <code>
            ParticleGravity grav = new ParticleGravity(0.4f);
            particleSystem.Add(grav);
            </code>
            </example>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleGravity.#ctor(SdlDotNet.Vector)">
            <summary>
            Creates a new ParticleSystem with a common gravity.
            </summary>
            <param name="velocity">The velocity (horizontal and vertical) of the particle system.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleGravity.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new ParticleSystem using gravity and wind.
            </summary>
            <param name="gravity">The vertical gravity of the system.</param>
            <param name="wind">The horizontal gravity of the system.  This is commonly refered to as wind.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleGravity.#ctor(System.Single)">
            <summary>
            Creates a new ParticleSystem with a vertical gravity.
            </summary>
            <param name="gravity">The vertical gravity of the system.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleGravity.#ctor">
            <summary>
            Creates a new ParticleSystem.
            </summary>
            <remarks>The gravity defaults as "new Vector()".</remarks>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleGravity.Manipulate(SdlDotNet.Particles.Particle.ParticleCollection)">
            <summary>
            Manipulate particles by the gravity.
            </summary>
            <param name="particles">The particles to pull by the gravity.</param>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleGravity.Velocity">
            <summary>
            Gets and sets the velocity (direction and speed) of the gravity as a vector.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleGravity.Gravity">
            <summary>
            Gets and sets the vertical pull of the gravity.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleGravity.Wind">
            <summary>
            Gets and sets the horizontal push of the gravity.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection">
            <summary>
            Describes a collection of particle manipulators.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.#ctor">
            <summary>
            Create an empty Particle Manipulator collection.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.#ctor(SdlDotNet.Particles.Manipulators.IParticleManipulator)">
            <summary>
            Create a particle manipulator collection with one element in it.
            </summary>
            <param name="manipulator">The first manipulator in the collection.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.#ctor(SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection)">
            <summary>
            Create a particle manipulator based off an already existing collection.
            </summary>
            <param name="manipulators">The manipulators to add to the collection.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.Add(SdlDotNet.Particles.Manipulators.IParticleManipulator)">
            <summary>
            Add a particle manipulator to the collection.
            </summary>
            <param name="manipulator">The manipulator to add to the collection.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.Add(SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection)">
            <summary>
            Add a collection of particle manipulators to the collection.
            </summary>
            <param name="manipulators">The manipulators to add to the collection.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.Manipulate(SdlDotNet.Particles.Particle.ParticleCollection)">
            <summary>
            Manipulate a collection of particles with the manipulators contained in the collection.
            </summary>
            <param name="particles">The particles to manipulate.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Provide the explicit interface member for ICollection.
            </summary>
            <param name="array">Array to copy collection to</param>
            <param name="index">Index at which to insert the collection items</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.CopyTo(SdlDotNet.Particles.Manipulators.IParticleManipulator[],System.Int32)">
            <summary>
            Provide the explicit interface member for ICollection.
            </summary>
            <param name="array">Array to copy collection to</param>
            <param name="index">Index at which to insert the collection items</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.Remove(SdlDotNet.Particles.Manipulators.IParticleManipulator)">
            <summary>
            Removes particleManipulator from collection
            </summary>
            <param name="particleManipulator">ParticleManipulator to remove</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.Insert(System.Int32,SdlDotNet.Particles.Manipulators.IParticleManipulator)">
            <summary>
            Insert a ParticleManipulator into the collection
            </summary>
            <param name="index">Index at which to insert the particleManipulator</param>
            <param name="particleManipulator">ParticleManipulator to insert</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.IndexOf(SdlDotNet.Particles.Manipulators.IParticleManipulator)">
            <summary>
            Gets the index of the given ParticleManipulator in the collection.
            </summary>
            <param name="particleManipulator">The particleManipulator to search for.</param>
            <returns>The index of the given ParticleManipulator.</returns>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.Contains(SdlDotNet.Particles.Manipulators.IParticleManipulator)">
            <summary>
            Checks if particleManipulator is in the container
            </summary>
            <param name="particleManipulator">ParticleManipulator to query for</param>
            <returns>True is the ParticleManipulator is in the container.</returns>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Manipulators.ParticleVortex">
            <summary>
            A particle manipulator that pulls particles towards a point.
            </summary>
            <remarks>If the radius is set to -1, the pull (strength) on all particles is constant.</remarks>
            <example>
            The following example creates a particle vortex that pulls particles towards the middle of the screen.
            <code>
            ParticleVortex vortex = new ParticleVortex(0.3f);
            vortex.X = (float)(Video.Screen.Width / 2);
            vortex.Y = (float)(Video.Screen.Height / 2);
            particleSystem.Add(vortex);
            </code>
            </example>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleVortex.#ctor">
            <summary>
            Creates a particle vortex manipulator with the default values.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleVortex.#ctor(System.Drawing.PointF)">
            <summary>
            Creates a particle vortex manipulator from just the location.
            </summary>
            <param name="position">The position of the vortex.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleVortex.#ctor(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Creates a particle vortex manipulator.
            </summary>
            <param name="position">The position of the vortex.</param>
            <param name="strength">The amount of pull applied to the particles.</param>
            <param name="radius">The size of the vortex. -1 is infinate size.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleVortex.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a particle vortex manipulator with an infinate size.
            </summary>
            <param name="posX">The X coordinate of the vortex.</param>
            <param name="posY">The Y coordinate of the vortex.</param>
            <param name="strength">The amount of pull applied to the particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleVortex.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a particle vortex manipulator with an infinate size.
            </summary>
            <param name="posX">The X coordinate of the vortex.</param>
            <param name="posY">The Y coordinate of the vortex.</param>
            <param name="strength">The amount of pull applied to the particles.</param>
            <param name="radius">The size of the vortex. -1 is infinate size.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleVortex.#ctor(System.Single)">
            <summary>
            Creates a particle vortex manipulator from just the strength.
            </summary>
            <param name="strength">The amount of pull applied to the particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleVortex.#ctor(System.Single,System.Single)">
            <summary>
            Creates a particle vortex manipulator from just the strength and radius.
            </summary>
            <param name="strength">The amount of pull applied to the particles.</param>
            <param name="radius">The size of the vortex. -1 is infinate size.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleVortex.Manipulate(SdlDotNet.Particles.Particle.ParticleCollection)">
            <summary>
            Applies the vortex force on each particle in the vortex's radius.
            </summary>
            <param name="particles">The collection of particles to manipulate.</param>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleVortex.Y">
            <summary>
            Gets and sets the Y coordinate of the vortex.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleVortex.X">
            <summary>
            Gets and sets the X coordinate of the vortex.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleVortex.Radius">
            <summary>
            Gets and sets the size, the radius, of the vortex.  If set to -1 the pull will be constant on each particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleVortex.Strength">
            <summary>
            Gets and sets the amount of pull put onto each particle in the vortex's radius.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Particle.ParticleCircle">
            <summary>
            A particle represented by a circle.
            </summary>
            <remarks>Use ParticleCircleEmitter to emit this particle.</remarks>
        </member>
        <member name="T:SdlDotNet.Particles.Particle.ParticlePixel">
            <summary>
            A particle represented by a pixel on the destination surface.
            </summary>
            <remarks>Use ParticlePixelEmitter to emit this particle.</remarks>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticlePixel.#ctor">
            <summary>
            Creates a new ParticlePixel.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticlePixel.#ctor(System.Drawing.Color,System.Single,System.Single)">
            <summary>
            Creates a new ParticlePixel.
            </summary>
            <param name="positionX">The X coordinate.</param>
            <param name="positionY">The Y coordinate.</param>
            <param name="color">The color of the pixel on the destination surface.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticlePixel.#ctor(System.Single,System.Single,SdlDotNet.Vector)">
            <summary>
            Creates a new ParticlePixel.
            </summary>
            <param name="positionX">The X coordinate.</param>
            <param name="positionY">The Y coordinate.</param>
            <param name="velocity">The speed and direction of the particle.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticlePixel.#ctor(System.Drawing.Color,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a new ParticlePixel.
            </summary>
            <param name="color">The color of the pixel on the destination surface.</param>
            <param name="positionX">The X coordinate.</param>
            <param name="positionY">The Y coordinate.</param>
            <param name="life">How long the particle is to stay alive.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticlePixel.#ctor(System.Drawing.Color,System.Single,System.Single,SdlDotNet.Vector,System.Int32)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="velocity"></param>
            <param name="life"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticlePixel.#ctor(System.Drawing.Color,System.Single,System.Single,SdlDotNet.Vector)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="velocity"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticlePixel.#ctor(System.Drawing.Color,SdlDotNet.Vector)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <param name="velocity"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticlePixel.#ctor(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="positionX"></param>
            <param name="positionY"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticlePixel.#ctor(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticlePixel.Render(SdlDotNet.Surface)">
            <summary>
            Draws the particle on the destination surface represented by a pixel.
            </summary>
            <param name="destination">The destination surface where to draw the particle.</param>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticlePixel.Color">
            <summary>
            The color of the particle pixel when drawn on the destination surface.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticlePixel.Height">
            <summary>
            Gets the height of the particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticlePixel.Width">
            <summary>
            Gets the width of the particle.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCircle.#ctor">
            <summary>
            Creates a particle represented by a circle with the default values.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCircle.#ctor(System.Int16)">
            <summary>
            Creates a particle represented by a circle with a set radius.
            </summary>
            <param name="radius"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCircle.Render(SdlDotNet.Surface)">
            <summary>
            Draws the particle on the destination surface represented by a circle.
            </summary>
            <param name="destination">The destination surface where to draw the particle.</param>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticleCircle.Radius">
            <summary>
            Gets and sets the radius of the particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticleCircle.Height">
            <summary>
            Gets and sets the height of the circle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticleCircle.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge of the circle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticleCircle.Left">
            <summary>
            Gets the x-coordinate of the left edge of the circle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticleCircle.Right">
            <summary>
            Gets the x-coordinate of the right edge of the circle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticleCircle.Top">
            <summary>
            Gets the y-coordinate of the top edge of the circle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticleCircle.Width">
            <summary>
            Gets and sets the width of the circle.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Particle.ParticleCollection">
            <summary>
            A collection of particles.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCollection.#ctor">
            <summary>
            Creates a new ParticleCollection.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCollection.#ctor(SdlDotNet.Particles.Particle.BaseParticle)">
            <summary>
            Creates a new ParticleCollection with one particle element.
            </summary>
            <param name="particle">The particle to start off the collection.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCollection.#ctor(SdlDotNet.Particles.Particle.ParticleCollection)">
            <summary>
            Creates a new ParticleCollection from an already existing collection of particles.
            </summary>
            <param name="collection">The collection to add.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCollection.#ctor(SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Creates a particle collection from the particles in the provided system.
            </summary>
            <param name="system">The system containing all the particles to add.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCollection.Add(SdlDotNet.Particles.Particle.BaseParticle)">
            <summary>
            Adds a particle to the collection.
            </summary>
            <param name="particle">The particle to add.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCollection.Add(SdlDotNet.Particles.Emitters.ParticleEmitter)">
            <summary>
            Adds a particle emitter to the collection.
            </summary>
            <param name="emitter">The emitter to add to the collection.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCollection.Add(SdlDotNet.Particles.Emitters.ParticleEmitter,System.Boolean)">
            <summary>
            Adds a particle emitter to the collection.
            </summary>
            <param name="emitter">The emitter to add to the collection.</param>
            <param name="changeEmitterTarget">Flag to chage the emitter's target particle collection.  Defaults to true.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCollection.Add(SdlDotNet.Particles.Particle.ParticleCollection)">
            <summary>
            Adds a collection of particles to the collection.
            </summary>
            <param name="collection">The collection of particles to add.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCollection.Add(SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Adds a collection of particles from a particle system.
            </summary>
            <param name="system">The system containing all the particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCollection.Update">
            <summary>
            Updates all particles in the collection.
            </summary>
            <returns>True if a particle is still alive.</returns>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCollection.Render(SdlDotNet.Surface)">
            <summary>
            Renders all particles on a destination surface.
            </summary>
            <param name="destination">The surface to render the particles onto.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Provide the explicit interface member for ICollection.
            </summary>
            <param name="array">Array to copy collection to</param>
            <param name="index">Index at which to insert the collection items</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCollection.CopyTo(SdlDotNet.Particles.Particle.BaseParticle[],System.Int32)">
            <summary>
            Provide the explicit interface member for ICollection.
            </summary>
            <param name="array">Array to copy collection to</param>
            <param name="index">Index at which to insert the collection items</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCollection.Remove(SdlDotNet.Particles.Particle.BaseParticle)">
            <summary>
            Removes particle from collection
            </summary>
            <param name="particle">Particle to remove</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCollection.Insert(System.Int32,SdlDotNet.Particles.Particle.BaseParticle)">
            <summary>
            Insert a Particle into the collection
            </summary>
            <param name="index">Index at which to insert the particle</param>
            <param name="particle">Particle to insert</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCollection.IndexOf(SdlDotNet.Particles.Particle.BaseParticle)">
            <summary>
            Gets the index of the given Particle in the collection.
            </summary>
            <param name="particle">The particle to search for.</param>
            <returns>The index of the given Particle.</returns>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleCollection.Contains(SdlDotNet.Particles.Particle.BaseParticle)">
            <summary>
            Checks if particle is in the container
            </summary>
            <param name="particle">Particle to query for</param>
            <returns>True is the Particle is in the container.</returns>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticleCollection.Item(System.Int32)">
            <summary>
            Indexer.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Particle.ParticleRectangle">
            <summary>
            Uses a rectangle to represent a particle on the destination surface.
            </summary>
            <remarks>Use ParticleRectangleEmitter to emit this kind of particle.</remarks>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleRectangle.#ctor">
            <summary>
            Creates a new particle rectangle.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleRectangle.#ctor(System.Drawing.Color)">
            <summary>
            Creates a new particle rectangle with a color.
            </summary>
            <param name="color">The color of the rectangle.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleRectangle.#ctor(System.Drawing.SizeF,System.Drawing.Color)">
            <summary>
            Creates a new particle rectangle with a color and a size.
            </summary>
            <param name="size"></param>
            <param name="color"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleRectangle.#ctor(System.Drawing.SizeF)">
            <summary>
            Creates a new particle rectangle with a size.
            </summary>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleRectangle.#ctor(System.Drawing.PointF,System.Drawing.Color)">
            <summary>
            Creates a new particle rectangle with a position and color.
            </summary>
            <param name="pos"></param>
            <param name="color"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleRectangle.#ctor(System.Drawing.PointF)">
            <summary>
            Creates a new particle rectangle with a position.
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleRectangle.#ctor(System.Drawing.RectangleF,System.Drawing.Color)">
            <summary>
            Creates a new particle rectangle with a position, size and color.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleRectangle.#ctor(System.Drawing.RectangleF)">
            <summary>
            Creates a new particle rectangle with a position and size.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleRectangle.Render(SdlDotNet.Surface)">
            <summary>
            Draws the particle on the destination surface.
            </summary>
            <param name="destination">The surface to draw the particle on.</param>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticleRectangle.Width">
            <summary>
            Gets and sets the width of the rectangle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticleRectangle.Height">
            <summary>
            Gets and sets the height of the rectangle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticleRectangle.Filled">
            <summary>
            Gets and sets whether or not the rectangle is to be a filled rectangle when drawn on the destination surface.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Particle.ParticleSprite">
            <summary>
            A particle represented by a Sprite.
            </summary>
            <remarks>Use ParticleSpriteEmitter to emit this particle.</remarks>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSprite.#ctor(SdlDotNet.Sprites.Sprite)">
            <summary>
            Creates a particle sprite based off an existing sprite.
            </summary>
            <param name="sprite">The sprite to represent this particle.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSprite.#ctor(SdlDotNet.Sprites.Sprite,SdlDotNet.Vector)">
            <summary>
            Create a particle sprite with a set velocity.
            </summary>
            <param name="sprite">The sprite to associate with this particle.</param>
            <param name="velocity">The velocity of the particle.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSprite.#ctor(SdlDotNet.Sprites.Sprite,System.Single,System.Single)">
            <summary>
            Create a particle sprite at a position.
            </summary>
            <param name="sprite"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSprite.#ctor(SdlDotNet.Sprites.Sprite,System.Single,System.Single,SdlDotNet.Vector)">
            <summary>
            
            </summary>
            <param name="sprite"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="velocity"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSprite.#ctor(SdlDotNet.Sprites.Sprite,SdlDotNet.Vector,System.Int32)">
            <summary>
            
            </summary>
            <param name="sprite"></param>
            <param name="velocity"></param>
            <param name="life"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSprite.#ctor(SdlDotNet.Sprites.Sprite,System.Int32)">
            <summary>
            
            </summary>
            <param name="sprite"></param>
            <param name="life"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSprite.#ctor(SdlDotNet.Sprites.Sprite,System.Single,System.Single,SdlDotNet.Vector,System.Int32)">
            <summary>
            
            </summary>
            <param name="sprite"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="velocity"></param>
            <param name="life"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSprite.Render(SdlDotNet.Surface)">
            <summary>
            Renders the sprite on the destination surface.
            </summary>
            <param name="destination">The surface to render the sprite.</param>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticleSprite.Sprite">
            <summary>
            The sprite representing the particle on the destination surface.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticleSprite.Height">
            <summary>
            Gets the height of the particle's sprite.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticleSprite.Width">
            <summary>
            Gets the width of the particle's sprite.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Particle.ParticleSurface">
            <summary>
            A particle represented by a surface.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSurface.#ctor(SdlDotNet.Surface,System.Single,System.Single,SdlDotNet.Vector,System.Int32)">
            <summary>
            Creates a particle surface.
            </summary>
            <param name="surface"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="velocity"></param>
            <param name="life"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSurface.#ctor(SdlDotNet.Surface,System.Single,System.Single,SdlDotNet.Vector)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="velocity"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSurface.#ctor(SdlDotNet.Surface,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSurface.#ctor(SdlDotNet.Surface,System.Single,System.Single,System.Int32)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="life"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSurface.#ctor(SdlDotNet.Surface)">
            <summary>
            
            </summary>
            <param name="surface"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSurface.#ctor(SdlDotNet.Surface,System.Drawing.Rectangle,System.Single,System.Single,SdlDotNet.Vector,System.Int32)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="clip"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="velocity"></param>
            <param name="life"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSurface.#ctor(SdlDotNet.Surface,System.Drawing.Rectangle,System.Single,System.Single,SdlDotNet.Vector)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="clip"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="velocity"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSurface.#ctor(SdlDotNet.Surface,System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="clip"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSurface.#ctor(SdlDotNet.Surface,System.Drawing.Rectangle,System.Single,System.Single,System.Int32)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="clip"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="life"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSurface.#ctor(SdlDotNet.Surface,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="clip"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Particle.ParticleSurface.Render(SdlDotNet.Surface)">
            <summary>
            Renders the surface as the particle.
            </summary>
            <param name="destination">The surface to blit the particle.</param>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticleSurface.Surface">
            <summary>
            Gets and sets the surface used to represent the particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticleSurface.ClipRectangle">
            <summary>
            Gets and sets the clipping rectangle of the surface.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticleSurface.Width">
            <summary>
            Gets the width of the particle's surface.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Particle.ParticleSurface.Height">
            <summary>
            Gets the height of the particle's surface.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.ParticleSystem">
            <summary>
            A collection of particles manipulated by a number of common manipulators.
            </summary>
            <example>
            The following example creates a particle system with an pixel emitter and a vortex manipulator.
            <code>
            ParticleSystem system = new ParticleSystem();
            system.Add(new ParticleVortex(0.3f));
            system.Add(new ParticlePixelEmitter(Color.Black, Color.White));
            </code>
            </example>
            <remarks>Every tick you should call the Update method.  Every time you paint, you should call the Render function.</remarks>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.#ctor">
            <summary>
            Creates an empty particle system with no manipulators.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.#ctor(SdlDotNet.Particles.Particle.ParticleCollection)">
            <summary>
            Creates a particle system with a collection of particles already in it.
            </summary>
            <param name="particles">The particles to use with this system.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.#ctor(SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Copy Constructor.
            </summary>
            <param name="system">The particle system to copy.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.#ctor(SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection,SdlDotNet.Particles.Particle.ParticleCollection)">
            <summary>
            Creates a particle system with an already created manipulators and particles.
            </summary>
            <param name="manipulators">The manipulators to associate with this particle system.</param>
            <param name="particles">The particles to add to this particle system.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.#ctor(SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection)">
            <summary>
            Creates an empty particle system with the desired paritcle manipulators.
            </summary>
            <param name="manipulators">The manipulators to use with the contained particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.#ctor(SdlDotNet.Particles.Manipulators.IParticleManipulator)">
            <summary>
            Creates an empty particle system with one particle manipulator.
            </summary>
            <param name="manipulator">The manipulator to use with this particle system.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.Update">
            <summary>
            Updates all particles within this system using the given gravity.
            </summary>
            <returns>True if the system contains particles.</returns>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.Add(SdlDotNet.Particles.Particle.BaseParticle)">
            <summary>
            Adds a particle to the system.
            </summary>
            <param name="particle"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.Add(SdlDotNet.Particles.Emitters.ParticleEmitter)">
            <summary>
            Add a particle emitter to the particles.
            </summary>
            <param name="emitter">The emitter to add.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.Add(SdlDotNet.Particles.Emitters.ParticleEmitter,System.Boolean)">
            <summary>
            Adds a particle emitter to the particles.
            </summary>
            <param name="emitter">The emitter to add.</param>
            <param name="changeEmitterTarget">Flag to change the emitters target to the particles of this system. Defaults to true.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.Render(SdlDotNet.Surface)">
            <summary>
            Renders all particles on the surface destination.
            </summary>
            <param name="destination">The destination surface.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.Add(SdlDotNet.Particles.Manipulators.IParticleManipulator)">
            <summary>
            Adds a particle manipulator to the system.
            </summary>
            <param name="manipulator"></param>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleSystem.Manipulators">
            <summary>
            Gets the collection of manipulators to manipulate the particles in the system.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleSystem.Particles">
            <summary>
            Gets the particles contained in the system.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.ParticleSystemCollection">
            <summary>
            A collection of independant particle systems.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystemCollection.#ctor">
            <summary>
            Creates an empty collection of particle systems.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystemCollection.#ctor(SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Creates a collection of particle systems.
            </summary>
            <param name="system">The system to start off the collection.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystemCollection.Add(SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Adds a system to the collection.
            </summary>
            <param name="system">The system to add.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystemCollection.Update">
            <summary>
            Updates all particle systems within the collection.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystemCollection.Render(SdlDotNet.Surface)">
            <summary>
            Renders all particle systems within the collection on the destination surface.
            </summary>
            <param name="destination">The surface to render the particle systems on.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystemCollection.CopyTo(SdlDotNet.Particles.ParticleSystem[],System.Int32)">
            <summary>
            Provide the explicit interface member for ICollection.
            </summary>
            <param name="array">Array to copy collection to</param>
            <param name="index">Index at which to insert the collection items</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystemCollection.Insert(System.Int32,SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Insert a ParticleSystem into the collection
            </summary>
            <param name="index">Index at which to insert the sprite</param>
            <param name="particleSystem">ParticleSystem to insert</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystemCollection.IndexOf(SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Gets the index of the given particleSystem in the collection.
            </summary>
            <param name="particleSystem">The particleSystem to search for.</param>
            <returns>The index of the given particleSystem.</returns>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystemCollection.Remove(SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Removes particleSystem from group
            </summary>
            <param name="particleSystem">particleSystem to remove</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystemCollection.Contains(SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Checks if particleSystem is in the container
            </summary>
            <param name="particleSystem">particleSystem to query for</param>
            <returns>True is the particleSystem is in the container.</returns>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleSystemCollection.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
        </member>
    </members>
</doc>
