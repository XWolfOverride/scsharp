2006-06-25  Chris Toshok  <toshok@hungry.com>

	* tools/: add a couple of tools: lsmpq.exe to list the contents of
	mpq files, and extract.exe to extract individual files from an
	mpq.
	
	* configure.ac: output tools/Makefile.

	* Makefile.am (SUBDIRS): add tools.

	* SCSharp/SCSharp.UI/Game.cs: load the patch_rt.mpq before
	anything else.

	* SCSharp/SCSharp.UI/RaceSelectionScreen.cs: update this for the
	race selection screen in patch_rt.mpq (it has the Load Replay
	button).

	* SCSharp/SCSharp.UI/ComboBoxElement.cs: invalidate the rectangle
	of the dropdown when it is shown/hidden, and when the selection
	changes.

	* SCSharp/SCSharp.UI/PlayCustomScreen.cs (PopulateGameTypes): the
	patch_rt.mpq templates.lst has an entry which doesn't exist in the
	mpq's.  make this method skip a null resource.

	* SCSharp/SCSharp.UI/Pcx.cs: return if we're out the data length
	while expanding an RLE block.. this isn't the right fix, but it
	keeps things from crashing.

2006-06-25  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/Painter.cs: set the clip rectangle for
	paintingSurface to Dirty when redrawing.  this means we no longer
	need to do all the complicated intersection tests in the various
	paint methods.

	* SCSharp/SCSharp.UI/GameScreen.cs: no need for the clip rectangle
	calculation in the starfield painter.

	* SCSharp/SCSharp.UI/CursorAnimator.cs: no need for the clip
	rectangle calculation.

	* SCSharp/SCSharp.UI/SpriteManager.cs: clean this up a
	bunch. We're no longer using the painter hack, and are called
	directly from an Events.Tick delegate.  Also, since we're now
	using a for loop (not an enumerator) to loop over the sprites, we
	don't need the pendingAdds/pendingRemoves crap anymore.

	* SCSharp/SCSharp.UI/PlayCustomScreen.cs: dispose of the
	selectedScenario mpq when the cursor moves to another one.

	* SCSharp/SCSharp.UI/UIDialog.cs: remove the clip retangle tests
	for the dim painter.

	* SCSharp/SCSharp.UI/Sprite.cs: remove the clip rectangle tests
	for the sprite.  Also, change the Tick method signature, since
	SpriteManager now calls us from an Events.Tick delegate.

	* SCSharp/SCSharp.UI/UIElement.cs: remove clip rectangle tests for
	the element's surface.

	* SCSharp/SCSharp.UI/UIScreen.cs: remove clip rectangle tests for
	background painter.

2006-06-25  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.Mpq/Mpq.cs: make Mpq implement IDisposable, and
	override it in the subclasses are needed.

	* SCSharp/SCSharp.Mpq/MpqArchive.cs: implement IDisposable, and
	add Dispose, which closes mStream.  This fixes the crash
	navigating through the map file selector.

2006-06-25  Chris Toshok  <toshok@hungry.com>

	* src/scsharp.exe.config: add new config settings.

2006-06-25  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI.dll.sources: add GrpElement/GrpButtonElement.

	* SCSharp/SCSharp.UI/Painter.cs (.cctor): get
	ShowFps/DebugPainterDirty configuration settings if !RELEASE.
	(Redraw): redraw the fps if the setting says so, and only
	invalidate the rectangle every 50 frames.  Also, if debug_dirty is
	on, fill the invalidated areas with red and flip the screen to
	give a visual indication of what is being redrawn.
	(Add, Remove): remove the calls to Invalidate from here.
	(Invalidate): clip the rectangle to 0,0-640,480.

	* SCSharp/SCSharp.UI/GameScreen.cs: biggest change is the removal
	of PaintHud.  We no longer rasterize the text screens on every
	redraw, and now modify UIElements when a unit is clicked and let
	the UIElement machinery take care of surface creation/blitting.

	(ScrollTick): check the new topleft coordinates against the old
	ones, and don't bother invalidating due to scrolling if they're
	the same.  Also, if we *do* invalidate, only invalidate the area
	used by the map (height = 375, not 640).
	(MouseButtonDown): make this work for both UI elements (like the
	GrpButtonElements) as well as units on the map.
	(MouseButtonUp): same.
	(PointerMotion): same.
	
	* SCSharp/SCSharp.UI/MainMenu.cs: fix the hover animation for
	Single Player, which needed to be offset, and also (unlike the
	other animations) appears beneath the normal animation.

	* SCSharp/SCSharp.UI/MarkupScreen.cs (AdvanceToNextPage):
	invalidate the painter so we'll draw the new page.

	* SCSharp/SCSharp.UI/ImageElement.cs: override Type to return
	ElementType.Image.

	* SCSharp/SCSharp.UI/LabelElement.cs: allow this class to be used
	for positioning arbitrary, resizable text elements.  The
	GameScreen uses it for text displayed in the HUD.

	* SCSharp/SCSharp.UI/RaceSelectionScreen.cs: add offsets for the
	animations, and shift the terran over so that it's centered
	properly.

	* SCSharp/SCSharp.UI/UIScreen.cs: make mouseDownElement and
	mouseOverElement protected.

	* SCSharp/SCSharp.UI/Game.cs (set_Cursor): only remove the cursor
	painter and add the new one if the value has changed.

	* SCSharp/SCSharp.UI/UIElement.cs (.ctor): add a new constructor
	which just takes a position.
	(set_Sensitive): only invalidate if the value has changed.
	(set_Visible): same.
	(get_ElementType): if the BinElement == null, return UserElement.
	
	* SCSharp/SCSharp.UI/Unit.cs: add lots of checks when looking up a
	unit's Portrait, return null if any of them fail.

	* SCSharp/SCSharp.UI/GrpElement.cs,
	SCSharp/SCSharp.UI/GrpButtonElement.cs: add two new UIElement
	subclasses which take a grp file and display a specific frame.  On
	the GameScreen, the wireframe unit display is a GrpElement, and
	the command buttons are GrpButtonElements.
	
2006-06-25  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.Mpq/Tbl.cs: add Count property.

	* SCSharp/SCSharp.Mpq/Dat.cs: add a few methods/properties of
	getting some debugging information out of variable blocks.

	* SCSharp/SCSharp.Mpq/Bin.cs: add a UserElement ElementType to
	reflect a user specific type (i.e. not one that corresponds to
	something we might find in a .bin file.)

	* SCSharp/SCSharp.Mpq/UnitsDat.cs: add Widths/Heights collection.

	* SCSharp/SCSharp.Mpq/SpritesDat.cs: ugh. modify NUM_SPRITES from
	517 to 386 as this number makes things work out, it appears.  No
	clue if this is actually *right* though.

2006-06-20  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/MainMenu.cs: reposition the hover movie
	elements to better align them with the normal movies.  The single
	player one is still unaligned, since there's no cue to tell where
	it should go.  I need a screenshot :)

2006-06-18  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/GameScreen.cs: use the new MapRenderer code.

	* SCSharp/SCSharp.UI/MapRenderer.cs: move this to code that
	renders the map a piece at a time (and composites the tiles onto a
	surface that's the size of the paintable screen instead of the
	size of the map).  Right now it just uses a Dictionary for a
	cache, so eventually (by scrolling all over the map) the memory
	usage ends up being just as bad (worse, probably) than it was
	before.  This should be fixed to use a LRU scheme, probably.

2006-06-18  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/GameScreen.cs: lots of changes.  make almost
	everything work with the Painter's Invalidate/Dirty stuff.  Also,
	add the portrait for the currently selected unit.

	* SCSharp/SCSharp.UI/Game.cs: for the ctrl-key handling return
	after handling it, so it doesn't also hit the UIScreen's keyboard
	handler.

	* SCSharp/SCSharp.UI/Sprite.cs: do the proper thing wrt
	Invalidate/Dirty.

	* SCSharp/SCSharp.UI/Painter.cs: get rid of backsurface.  since
	we're double buffered anyway there's no need for the extra blit
	and additional 640x480x4 bytes.  Also, remove the
	pending{Add,Clear,Remove} stuff.  this shouldn't be a problem
	anymore, as we're iterating using a for loop instead of anything
	requiring an enumerator.  Lastly, change the way fps is calculated
	- we were skipping frames that didnt require drawing in the case
	where we weren't showing fps.  Also, dispose of the previous
	fps_surface before creating a new one.

	* SCSharp/SCSharp.UI/MovieElement.cs: add a ctor for the
	non-BinElement case.

	* SCSharp/SCSharp.UI/ImageElement.cs: same.

	* SCSharp/SCSharp.UI/UIElement.cs: add a ctor that doesn't take a
	BinElement, useful for creating UIElements which don't correspond
	to something in a .bin file.

	* SCSharp/SCSharp.UI/Unit.cs: add Portrait property.

	* SCSharp/SCSharp.UI/UIScreen.cs: remove some spew about the
	background painter.  Also, always create the Elements collection
	and UIPainter, so we can programmatically add to it, even for
	UIScreens that don't have a .bin file associated with them (like
	the game screen.)

2006-06-17  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.Mpq/Dat.cs: new superclass for all *.dat files.
	Makes managing the variable blocks a little easier.  probably a
	little less performant, but I think overall it'll be a win.

	* SCSharp/SCSharp.Mpq/*Dat.cs: port to the new Dat.cs superclass.

	* SCSharp/SCSharp.UI/*.cs: same.  Also, clean up some compiler
	warnings and (CursorAnimator.cs) speed up the cursor animation.
	
2006-06-16  Chris Toshok  <toshok@hungry<.com>

	* SCSharp/SCSharp.Mpq/PortDataDat.cs: new class.

	* SCSharp/SCSharp.UI/Builtins.cs: make PortData* capitalization
	consistent.

	* SCSharp/SCSharp.Mpq/Mpq.cs: handle "portdata.dat".

	* SCSharp/SCSharp.UI/ReadyRoomScreen.cs: rewrite most of this
	class.  We now show portraits correctly (in original campaigns,
	not expansion.) and we get rid of the hacked Background UIElement
	support.

	* SCSharp/SCSharp.Mpq/UnitsDat.cs: add portrait support.

	* SCSharp/SCSharp.UI/GlobalResources.cs: add
	portdata.dat/portdata.tbl support.

	* SCSharp/SCSharp.UI/MovieElement.cs: add back in the scaling, and
	also allow the SmackerPlayer to be set instead of just created in
	the ctor.  We use this in the ready room screen to switch
	portraits in/out.

	* SCSharp/SCSharp.UI/Painter.cs: add a Prepend call to add
	painters to the beginning of the list.

	* SCSharp/SCSharp.UI/UIPainter.cs: Allow null UIElements to exist
	in the Paint method.  just skip them as we iterate over the list.

	* SCSharp/SCSharp.UI/UIElement.cs: allow changing of the Text as
	well Width/Height properties.  Also, remove the "background" hack
	that was used in the ready room.  A much better solution is now in
	place.

	* SCSharp/SCSharp.UI/ImageElement.cs: allow specification of the
	colormap index used for translucency.  Transparency seems to
	always be index 0.

	* SCSharp/SCSharp.UI/UIScreen.cs: add a protected property so
	subclasses can alter the colormap index used for translucent
	images.  Defaults to 254, which is used for most screens it seems.
	Pass this index to the ImageElement constructor.

	* SCSharp/SCSharp.Util/Util.cs: quiet the compiler.

	* SCSharp/SCSharp.Mpq/Grp.cs: quiet the compiler.

	* SCSharp/SCSharp.Mpq/Chk.cs: quiet the compiler.

2006-06-15  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/RaceSelectionScreen.cs: share the same
	SmackerPlayer between the three disk elements.

	* SCSharp/SCSharp.UI/SmackerPlayer.cs: don't throw if we call Play
	or Stop multiple times, just ignore the extra calls.

	* SCSharp/SCSharp.UI/MovieElement.cs: add a ctor that takes a
	SmackerPlayer.

2006-06-14  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/RaceSelectionScreen.cs: add in the movies,
	and try to position them correctly.  the first campaign (the
	center one) doesn't isn't positioned correctly, I don't think.
	Another thing that needs fixing is the fact that we create 3
	separate disk.smk players.  Maybe multiple MovieElements should be
	able to share the same SmackerPlayer?

	* SCSharp/SCSharp.Mpq/Bin.cs: we're using
	ElementFlags.Unused02000000 to mean ElementFlags.BottonAlignText.

	* SCSharp/SCSharp.UI/MainMenu.cs: update the version (finally) to
	"v0.0000008".  force the single player button's text to be right
	aligned and centered vertically.  Also, remove the scaling flag
	from the MovieElement ctor.

	* SCSharp/SCSharp.UI/ButtonElement.cs: split out the text surface
	creation from CreateSurface() so we can use it for the new
	TextPosition getter.

	* SCSharp/SCSharp.UI/UIElement.cs: add a setter for Flags.

	* SCSharp/SCSharp.UI/MovieElement.cs: remove the scaling feature
	(i don't think any movies in the UI are scaled), and add in
	support for "dimming" a movie (which gets used in the race
	selection screen).

2006-06-13  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/ImageElement.cs: just always create the
	surface with 254/0 as translucent/transparent.  This fixes the
	"tail" of the multi player graphic.

2006-06-13  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI.dll.sources: add MovieElement.cs

	* SCSharp/SCSharp.UI/SmackerPlayer.cs (.ctor): allow the user to
	specify the number of frames to be buffered.
	(DecoderThread): catch exception (which we seem to hit) and break
	out of the loop (and thus "finish" the animation).  Also, the
	whole "finish" thing needs rethinking, since we need to finish
	after we've *played* the last frame, not after we've queued it.
	(Events_Tick): initial creation of the surface needs some extra
	help so we get a surface with the proper alpha.
	(Stop): don't null out decoder/surf.

	* SCSharp/SCSharp.UI/MainMenu.cs (AddToPainter): start up the
	movie elements.
	(RemoveToPainter): stop the movie elements.
	(AddMovieElements): add normal/mouseover movie elements and set up
	event handlers to show/hide the mouseover element.  Set the movies
	to only queue 1 frame.
	(ResourceLoader): set up all the movie elements.

	* SCSharp/SCSharp.UI/MovieElement.cs: new hack in order to get
	smacker players in UIScreens.

	* SCSharp/SCSharp.Mpq.Smk/SmkDecoder.cs (BGRAData): black is
	transparent.

	* SCSharp/SCSharp.UI/UIElement.cs: add getter for the BinElement,
	and only call Painter.Instance.Invalidate() if we're visible.

2006-06-13  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.Mpq/MpqArchive.cs (DecryptBlock): decrypt the
	block in place instead of repeatedly allocating a 4 byte array.

2006-06-13  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/SmackerPlayer.cs: switch from using
	Thread.Suspend/Thread.Resume to using an AutoResetEvent.  the
	decoder calls .WaitOne when the queue is full, and the player
	thread calls .Set when the queue is less than half full.  This
	fixes the hanging of the player.  It also seems to fix the Ctrl-q
	behavior during playback.

	* SCSharp/SCSharp.UI/Cinematic.cs (PlayerFrameReady): move the
	scaling code here so we don't scale on every repaint.  also,
	dispose of the previously scaled surface.
	(VideoPainter): simplify this method to just a check and Blit
	call.

2006-06-13  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/Game.cs (.ctor): fix c&p error.

2006-06-13  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.Mpq.Smk/SDLPCMStream.cs (Dispose): mark "new" to
	fix compile error on windows.

	* SCSharp/SCSharp.UI/SpriteManager.cs (CreateSprite): Commit
	Foole's fix for ticket #7.

2006-06-13  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/Game.cs: Fix ticket #8, use ToLower() to
	check for the SC install.exe filename.

2006-06-13  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/SmackerPlayer.cs: mostly adapt MtPOI's
	SmkTest player here.  Remove the (missing) ffmpeg glu library
	dependency.

	* SCSharp/SCSharp.UI/Cinematic.cs: move the frame scaling stuff
	here.

	* SCSharp/SCSharp.UI/Painter.cs: rewrite things such that we only
	have one Painter (accessed via Painter.Instance).  Also, now we
	only paint if there's a dirty rectangle.  We rely on the various
	UI elements to tell us when a region on the screen is invalid and
	needs redrawing.  This isn't the final iteration, but it's a lot
	closer to the "right" solution.

	* SCSharp/SCSharp.Util/Util.cs: add MakeTag from MtPOI's SmkLib.
	it should probably live in that code instead of here, but leave it
	here for now.

2006-06-08  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/GameScreen.cs: add rendering of wireframe,
	some of the text strings, and (if you click on the terran command
	center) the cmd icons.  Cmd icons need to be in a table in the
	.exe, I think (unless someone can find where they exist in the
	.mpq file).  The colors in the rendered text/icons are wrong at
	the moment.

	* SCSharp/SCSharp.UI/Race.cs: reorder this to match some strings
	in stat_txt.tbl.

	* SCSharp/SCSharp.Util/Util.cs: reorder RaceChar and RaceCharLower
	to match Race.cs.

	* SCSharp/SCSharp.UI/Unit.cs (UnitId): add a new accessor.

2006-06-04  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/SpriteManager.cs: when we're executing inside
	Tick, don't modify the sprite list.  store off pending
	removes/adds and process them after we're done with the tick
	handler.  Should fix ticket #4.

2006-05-30  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/Game.cs (.ctor): guard against having
	multiple broodat.mpq/stardat.mpq files in a directory (since we
	have to use ToLower() to do string comparisons, we can end up with
	multiple matches.)

2006-05-30  Chris Toshok  <toshok@hungry.com>

	* src/scsharp.cs (Main): add a test to make sure
	StarcraftCDDirectory and BroodwarCDDirectory have unique values.
	I can't believe anyone would do that and expect it to work, but
	what have you... fixes ticket #2.

2006-05-30  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/Sprite.cs (PaintSprite): the logic for the
	clipping test wasn't taking into account the fact that the x,y of
	a unit changed from top-left to center.  this fixes ticket #3.

2006-05-29  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/TitleScreen.cs (LoadingFlasher): flash the
	"Loading" text on the screen as we load things.  The managed
	stormlib does take a little longer to load things, which is a
	bonus - the title screen actually stays up long enough for this
	string to be shown :)

2006-05-29  Chris Toshok  <toshok@hungry.com>

	* Makefile.am (release): make it a zip file instead of a tar.bz2.

2006-05-29  Chris Toshok  <toshok@hungry.com>

	* Makefile.am (release): fix this target so that it works again.

	* NEWS: include news for the first time.

	* configure.ac: bump to 0.0000008.

	* HACKING: fix up the .smk entry, with various options for
	projects, and remove the managed stormlib project since Foole's is
	working.

	* RELEASE_README: s/starcraft/scsharp

	* src/scsharp.exe.config-example: add the new options.

	* src/scsharp.exe.config: can't put -- in the middle of comments.

2006-05-29  Chris Toshok  <toshok@hungry.com>

	* SCSharp/Makefile.am (MCSFLAGS): define USE_STORM_DLL if
	ENABLE_STORMLIB == true.

	* src/scsharp.exe.config: add some comments about the debugging
	options, and add a new one to enable the unmanaged mpq library.

	* Tests/dump-iscript.cs (DumpIScript.ctor): we assume the mpq
	passed in is the stardat.mpq.

	* SCSharp/SCSharp.UI/Painter.cs (.ctor): add back in a constructor
	taking a Surface so the font-foo test continues to work.

	* SCSharp/SCSharp.Mpq/Mpq.cs: USE_STORM_DLL no longer switches
	between managed/unmanaged implementations, but compiles in the
	optional unmanaged version as well.

	* Makefile.am (SUBDIRS): only build in StormLib if ENABLE_STORMLIB
	== true.

	* configure.ac: add AC_ARG_ENABLE for --enable-stormlib.  If it's
	left out, only the managed version is built.

2006-05-29  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/Game.cs (CreateWindow): switch to new Painter
	ctor.
	(KeyboardDown): add handling for Ctrl-F to switch between
	fullscreen and windowed mode.

	* SCSharp/SCSharp.UI/UIDialog.cs: s/Game/Painter for the screen
	nres constants.

	* SCSharp/SCSharp.UI/Sprite.cs: same.
	
	* SCSharp/SCSharp.UI/Cinematic.cs: same.
	
	* SCSharp/SCSharp.UI/GameScreen: same.

	* SCSharp/SCSharp.UI/UIScreen.cs (FirstPaint): revert to this
	the non-disgusting hack version.

	* SCSharp/SCSharp.UI/Painter.cs: move the SCREEN_RES_X/Y constants
	here, from Game.cs.
	(Fullscreen): new property, allow switching between fullscreen and
	not.

2006-05-26  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.Mpq/Chk.cs (ReadFromStream): change the loop so
	that it'll work with both StormLib and the managed .mpq stuff.

2006-05-24  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/GuiUtil.cs (RenderGlyph): add a hack to
	antialias the fonts.  of course this is yet another hack on top of
	the already hackish nature of font rendering.

2006-05-24  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/GameScreen.cs: track the Unit currently under
	the cursor, and when we click on it, spew a little info about it.

2006-05-24  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/Game.cs (DisplayTitle): use the FirstPainted
	event to determine when the title screen is shown, rather than the
	Ready event (which is emitted when it finishes loading.)
	(TitleScreenReady): pass in both stardatMpq and broodatMpq to the
	GlobalResources ctor so it can load both sets of resources.

	* SCSharp/SCSharp.UI/Builtins.cs: add mapdata.dat and mapdata.tbl.

	* SCSharp/SCSharp.UI/GlobalResources.cs: rework things in this
	class to handle loading both the broodwar and starcraft assets.
	Use Game.PlayingBroodwar to implicitly switch between the
	different versions when using just the resource name, but allow
	explicit access to each version when necessary.

	* SCSharp/SCSharp.Mpq/Mpq.cs (GetTypeFromResourcePath): handle
	mapdata.dat.

	* SCSharp/SCSharp.Mpq/MapDataDat.cs: new class, just a set of
	indices into mapdata.tbl.

	* SCSharp/SCSharp.UI/GameModeDialog.cs (LoadResources): explicitly
	use broodat's gluAll.tbl to get the dialog title.  This keeps us
	from crashing if we select "Original", then exit back to the main
	menu and open this dialog again.

	* SCSharp/SCSharp.UI/Painter.cs (Tick): rename "Animate" to this.
	(DrawText):  remove unused, empty function.

	* SCSharp/SCSharp.UI/RaceSelectionScreen.cs
	(BroodwarCampaigns_MapDataStart): stop hardcoding the strings
	here.  instead, hardcode the indices into the mapdata.dat file.
	(StarcraftCampaigns_MapDataStart): same.
	(LoadResources): in the campaign element activate delegates, just
	call SelectCampaign.
	(SelectCampaign): factor out a lot of shared code here.  Use the
	campaign indices to determine the correct prefix.  Also, switch to
	the establishing shot for the given scenario.  It'll take care of
	starting up the ready room.

	* SCSharp/SCSharp.UI/ReadyRoomScreen.cs (LoadResources): in the
	start_element activate delegate, stop the briefing before
	switching to the game screen.
	(StopBriefing): remove our Events.Tick handler.
	(FirstPaint): remove the AddToPainter/RemoveFromPainter
	runner.Tick hack, and just hook up to Events.Tick.
	(BriefingRunner.Tick): change this to a Tick event handler from a
	painter.  Keep track of total elapsed, and change sleepUntil to an
	int from a DateTime.
	(EstablishingShot): new markup screen, used for showing the
	establishing shot/text before the ready room is displayed.

	* SCSharp/SCSharp.UI/MarkupScreen.cs (Paint): add handling for
	PageLocation.LowerLeft.
	(AddMarkup): add handling for </SCREENLOWERLEFT>.
	(AddToPainter): remove the FirstPainted stuff from here.  we'll
	just use UIScreen's.
	(RemoveFromPainter): same.
	(FirstPaint): change FirstPainted to this, overriding UIScreen's.

	* SCSharp/SCSharp.UI/UIScreen.cs (FirstPaint): emit our
	FirstPainted event and remove the painter delegate.
	(AddToPainter): add the FirstPaint delegate.
	(RemoveFromPainter): remove the FirstPaint delegate.

	* SCSharp/SCSharp.UI/MainMenu.cs (LoadResources): in the
	intro_element delegate, remove the ifdefs.  Just switch to the
	cinematic.  If it fails to play we'll return to the main menu.

	* SCSharp/SCSharp.UI/SmackerPlayer.cs: catch the
	DllNotFoundException if we couldn't load ffmpegglue.dll, and just
	finish immediately in that case whenever someone plays a movie.

2006-05-15  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/ReadyRoomScreen.cs (FirstPaint): remove
	unused function.
	(UnhighlightPortrait): only set the background if the portrait is
	still visible.
	(ShowPortrait): set the portrait's background to the unhighlighted
	frame.
	(HidePortrait): clear the portrait's background.

	* SCSharp/SCSharp.UI/Game.cs: better handle the differentiation
	between "what mpqs do i have installed?" and "which version
	(original/expansion) am i playing?"  GlobalResources still doesn't
	load both sets, however.

2006-05-14  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/ReadyRoomScreen.cs: why do i insist on
	writing threaded code?  there's no need for it here.  Also, make
	things work a lot better.  highlight the current speaker, set the
	background/font/effects/cursor stuff correctly.

	* SCSharp/SCSharp.UI/RaceSelectionScreen.cs: use the tutorials for
	protoss/terran.  zerg doesn't work for some reason.  there are no
	triggers.

	* SCSharp/SCSharp.UI/UIElement.cs: kind of a hack, but allow a
	"background .pcx" to be supplied.  it's used to highlight the
	current speaker in the mission briefings.

2006-05-14  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/GameScreen.cs (.ctor): add a constructor
	that's useful from the readyroom.
	(PlaceInitialUnits): deal with a null template, which happens with
	campaigns.

	* SCSharp/SCSharp.UI/RaceSelectionScreen.cs: make this work for
	both broodwar and original race selection screens.  Hardcode the
	first scenarios for each campaign here as well - eventually
	they'll come from mapdata.dat/tbl.

	* SCSharp/SCSharp.UI/Game.cs (.ctor): don't add anything to the
	mpq container - let the PlayingBroodWar setter do that.
	(set_PlayingBroodWar): clean this up a bit.
	(set_Race): add setter.
	
	* SCSharp/SCSharp.UI/ReadyRoomScreen.cs: subclass ReadyRoomScreen
	for each race, since at least the zerg screen has different
	element indices.  Write an initial pass of the briefing runner,
	which displays text and plays .wav files.  There are definite
	threading + Sdl audio issues here.

	* SCSharp/SCSharp.UI/Builtins.cs: replace the race specific ready
	room strings with a formatable string.

	* SCSharp/SCSharp.Mpq/IScriptBin.cs (GetScriptEntryOffset): don't
	throw an exception here, just return 0. the caller can handle
	that.

	* SCSharp/SCSharp.Mpq/Chk.cs: add mission briefing support (add
	trigger, condition, action classes).

	* SCSharp/SCSharp.Mpq/Mpq.cs (Add): return if mpq == null.
	(Remove): same.
	(Clear): new function, call mpqs.Clear.
	(GetStreamForResource): spew something if we're going to return
	null.

2006-05-13  Chris Toshok  <toshok@hungry.com>

	* src/scsharp.cs (Main): switch from just 1 CD directory setting
	to 2.

	* src/scsharp.exe.config: add the new CD directory settings.

	* SCSharp/SCSharp.UI/RaceSelectionScreen.cs (.ctor): load the
	correct resource depending on if we're BW or SC.

	* SCSharp/SCSharp.UI/Game.cs (.ctor): change the way we look for
	and load mpq's.  Keep track of both BW and SC install.exe's.
	(PlayingBroodWar): this property is initialized to true if
	broodat.mpq is found, and causes either the bw or sc cd to become
	available for resource lookups.

	* SCSharp/SCSharp.UI/MainMenu.cs (ShowGameDialog): add some code
	to display a dialog if the user is missing the correct CD
	install.exe.

	* SCSharp/SCSharp.UI/LoginScreen.cs (ResourceLoader): we don't
	cache the race selection screen anymore, as it changes depending
	on whether you pick BW/SC.

	* SCSharp/SCSharp.UI/PlayCustomScreen.cs (ResourceLoader): no more
	cached race selection screen.

	* SCSharp/SCSharp.UI/LoadSavedScreen.cs: same.

	* SCSharp/SCSharp.UI/Builtins.cs: add the original campaign ui.

	* SCSharp/SCSharp.UI/ButtonElement.cs (MouseEnter): only play the
	sound if the button is sensitive -- maybe we shouldn't even get
	called if we're insensitive?

	* SCSharp/SCSharp.UI/MarkupScreen.cs (ResourceLoader): call
	LoadMarkup, and add it as an abstract method.

	* SCSharp/SCSharp.UI/CreditsScreen.cs (LoadMarkup): rename
	ResourceLoader to this.

	* SCSharp/SCSharp.UI/UIElement.cs (.ctor): cache x1/y1 here so the
	setters so we don't keep modifying the BinElement's coordinates
	each time we display a dialog, shifting it further and further
	down and to the right.
	(X1): use the cached value.
	(Y1): same.

2006-05-13  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.dll.sources: add the MpqReader sources.

	* SCSharp/Makefile.am (MCSFLAGS): add -d:USE_STORM_DLL

	* SCSharp/SCSharp.Mpq/Mpq.cs: add a series of USE_STORM_DLL ifdefs
	to choose between libStorm.so and Foole's managed MpqReader.

	* SCSharp/SCSharp.Mpq/MpqStructs.cs,
	SCSharp/SCSharp.Mpq/MpqArchive.cs,
	SCSharp/SCSharp.Mpq/MpqStream.cs,
	SCSharp/SCSharp.Mpq/PKLibDecompress.cs: add 0.02 of Foole's
	managed Mpq reading code.  It doesn't work quite yet, but this way
	we can test it with scsharp.
	
2006-05-10  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.Mpq/Mpq.cs (GetResource): don't cache .smk files
	(the cinematics at least are enormous).
	(GetTypeFromResourcePath): make .smk files use a Stream instead of
	our Smk class.

	* SCSharp/SCSharp.UI/SmackerPlayer.cs: use FFmpeg to display .smk
	files.  This works on my machine, but lacks audio and the glue
	code is in general pretty ugly.  Going to take a look at using
	gstreamer tonight.  With this in mind, I'm not adding
	SmackerPlayer.cs+Cinematic.cs to the build, and I'm not going to
	check in the ffmpegglue code.

	* SCSharp/SCSharp.UI/Cinematic.cs: new file, basically takes over
	the screen and runs a SmackerPlayer.

	* SCSharp/SCSharp.UI/ButtonElement.cs (MouseEnter): rename
	MouseOver to this.

	* SCSharp/SCSharp.UI/GuiUtil.cs (CreateSurface): make this public.

	* SCSharp/SCSharp.UI/RaceSelectionScreen.cs (ResourceLoader): add
	delegates for MouseEnter/MouseLeave to display the incomplete
	messages.  we always show them at the moment, instead of getting
	that information from the .spc file.

	* SCSharp/SCSharp.UI/MainMenu.cs (ShowGameModeDialog): factor this
	code out from both the single/multiplayer delegates.
	(ResourceLoader): add ifdef'ed code for the intro cinematic, and
	use ShowGameModeDialog for single/multiplayer.

	* SCSharp/SCSharp.UI/UIElement.cs: switch from MouseOver to
	MouseEnter+MouseLeave.

	* SCSharp/SCSharp.UI/UIScreen.cs: switch from MouseOver to
	MouseEnter+MouseLeave so we can implement things like the strings
	on the race selection screen where they tell you previous
	campaigns haven't been completed yet.
	(KeyboardDown): guard against Elements being null.

2006-05-08  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/GuiUtil.cs (CreateSurface): refactor the
	duplicated code from
	CreateSurfaceFromRGBAData/CreateSurfaceFromRGBData here.
	(CreateSurfaceFromRGBAData): call CreateSurface
	(CreateSurfaceFromRGBData): call CreateSurface

2006-05-01  Chris Toshok  <toshok@hungry.com>

	* Tests/Makefile.am (font_foo_exe_REFS): more build fixes.

	* configure.ac: add a check for mono >= 1.1.14

2006-05-01  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.Mpq/Mpq.cs: Make GetStreamForResource public so
	it can be used to extract files from mpq archives.

2006-04-30  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/Unit.cs (CreateSprite): implement.

	* SCSharp/SCSharp.UI/GameScreen.cs (PlaceInitialUnits): use Unit
	everywhere.

	* SCSharp/SCSharp.UI/Sprite.cs (.ctor): add a little more info to
	the spew.

	* SCSharp/SCSharp.UI/GlobalResources.cs (ResourceLoader): remove
	spew.
	(LoadSingleThreaded): load without spawning off a worker thread.
	useful in tools and tests.

2006-04-10  Chris Toshok  <toshok@hungry.com>

	* Makefile (VERSION): bump to 0.0000002.

2006-04-10  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/OkCancelDialog.cs: use 254,0 for
	translucent,transparent.

	* SCSharp/SCSharp.UI/OkDialog.cs: same.

	* SCSharp/SCSharp.UI/EntryDialog.cs: same.

2006-04-10  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/GameModeDialog.cs (.ctor): set
	background_path to null, as we'll load it in ResourceLoader.
	(ResourceLoader): manually load the background, using its specific
	translucent/transparent indices.
	
	* SCSharp/SCSharp.UI/GuiUtil.cs (SurfaceFromStream): always
	use our managed Pcx loader.
	(SurfaceFromStream): for the Stream,bool overload, pass in 252,0
	for translucent,transparent, respectively.
	(SurfaceFromStream): for the Stream overload, pass -1,-1.
	
	* SCSharp/SCSharp.UI/UIScreen.cs (ResourceLoader): pass -1,-1
	to the Pcx.ReadFromStream calls.

	* SCSharp/SCSharp.UI/CreditsScreen.cs (ResourceLoader): pass
	-1,-1 to the Pcx.ReadFromStream calls.

	* SCSharp/SCSharp.UI/Pcx.cs (ReadFromStream): allow the
	passing in of translucent/transparent indices.

	* SCSharp/SCSharp.Mpq/Bin.cs (ElementFlags): include the
	unknown flages as Unknown/Unused.

2006-04-10  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/ReadyRoomScreen.cs: first pass.

	* SCSharp/SCSharp.UI/Builtins.cs: add ready room builtins.

2006-04-10  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/ListBoxElement.cs: track cursor when
	list becomes empty/non-empty.  Set it initially to -1.

	* SCSharp/SCSharp.UI/LoginScreen.cs (OkElement delegate): if
	we don't have a selected id, return immediately.  This should only
	happen if the list is empty.

	* SCSharp/SCSharp.UI/ConnectionScreen.cs: add Ok dialog when
	people select Battle.net.

	* SCSharp/SCSharp.UI/credits.txt: thank the
	mono/sdl/sdldotnet projects.

2006-04-10  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/ConnectionScreen.cs: populate the
	ListBox element with our choices, and handle the cursor moving
	properly.  Ifdef this for the time being to only display
	Battle.net.

	* SCSharp/SCSharp.UI/GameModeDialog.cs: insert the title
	string in the dialog, and change Canceled/Activated to
	Cancel/Activate.

	* SCSharp/SCSharp.UI/UIDialog.cs: keep track of the parent
	UIScreen that popped us up.
	(ShowDialog): overload this so we can remove ourselves from the
	painter before showing the new dialog.  In a better world we'd
	just show the new popup at a higher layer.
	(DismissDialog): overload to add ourselves back to the painter.

	* SCSharp/SCSharp.UI/GuiUtil.cs: add another ComposeText
	overload.

	* SCSharp/SCSharp.UI/MainMenu.cs: pop up Ok dialogs with
	messages about missing functionality (no cinematics and no
	campaign editor.)

	* SCSharp/SCSharp.UI/LoginScreen.cs (ResourceLoader): for the
	ok button pop up a dialog saying what we should do in this case.
	Also add functionality for the new button (pops up an entry
	dialog) and delete button (pops up an ok/cancel dialog).
	(KeyboardDown): forward on UpArrow/DownArrow to the list box
	element.
	(NameAlreadyExists): pop up an OkDialog.

	* SCSharp/SCSharp.UI/UIPainter.cs: clean up warnings, and
	make it compile with -define:SHOW_ELEMENT_BORDERS.

	* SCSharp/SCSharp.UI/CreditsScreen.cs: clean up some
	warnings.

	* SCSharp/SCSharp.UI/Builtins.cs: add some more strings for
	the login screen dialogs.

	* SCSharp/SCSharp.UI/UIElement.cs (Mpq): add getter.
	(Text): use ClearSurface.
	(Sensitive): same.
	(Palette): new getter/setter.
	(Font): new getter/setter.
	(ClearSurface): new protected method.
	(CreateSurface): provider base class implementation that handles
	the types we don't provider subclasses for.

	* SCSharp/SCSharp.UI/UIScreen.cs (HandleKeyboardUp): return
	immediately for keypresses corresponding to modifier keys.
	(HandleKeyboardDown): same.
	(ActivateElement): if the element isn't sensitive, don't activate
	it.
	(ResourceLoader): create different UIElement subclasses depending
	on the BinElement's type.

	* SCSharp/SCSharp.UI/TextBoxElement.cs: new UIElement,
	allowing text editing.  No flashing cursor displayed yet.

	* SCSharp/SCSharp.UI/OkCancelDialog.cs: a question dialog,
	containing a message and Ok/Cancel buttons.

	* SCSharp/SCSharp.UI/OkDialog.cs: a simple message dialog,
	containing a message and Ok button.

	* SCSharp/SCSharp.UI/EntryDialog.cs: new Dialog containing a
	title, text entry, and Ok/Cancel buttons.

	* SCSharp/SCSharp.UI/ImageElement.cs: new UIElement
	displaying an image.

	* SCSharp/SCSharp.UI/ListBoxElement.cs: new UIElement,
	displaying a list. doesn't do scrolling yet.

2006-04-09  Chris Toshok  <toshok@hungry.com>

	* SCSharp/SCSharp.UI/GameModeDialog.cs (ResourceLoader): add
	title text.

